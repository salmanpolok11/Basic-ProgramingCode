// JavaScript-এ `reverse()` একটি মেথড, যার কাজ হলো কোনো অ্যারের (array) উপাদানগুলোর ক্রম (order) উল্টে দেওয়া। এটি মূল অ্যারেকেই পরিবর্তন (mutate) করে এবং নতুন অ্যারে তৈরি করে না।  

// *কীভাবে কাজ করে:**
// `reverse()` একটি অ্যারের প্রথম উপাদানকে শেষের দিকে এবং শেষের উপাদানকে প্রথমে এনে পুরো ক্রম উল্টে দেয়।  
// **সিনট্যাক্স:**  
// array.reverse();

// ### **উদাহরণ:**

let numbers = [1, 2, 3, 4, 5];
numbers.reverse();
console.log(numbers);


// **আউটপুট:**
// [5, 4, 3, 2, 1]
// এখানে মূল অ্যারে `numbers` এর উপাদানগুলোর ক্রম উল্টে গেছে। 


// ### **স্ট্রিং উল্টানোর জন্য:**
// যেহেতু `reverse()` স্ট্রিং-এ সরাসরি কাজ করে না, তাই স্ট্রিংকে প্রথমে অ্যারেতে রূপান্তর করতে হয়।
// **উদাহরণ:**

let text = "জাভাস্ক্রিপ্ট";
let reversedText = text.split("").reverse().join("");
console.log(reversedText);

// **আউটপুট:**
// => "্টিপ্সকারভাজ"


// এখানে:  
// 1. **`split("")`**: স্ট্রিংকে প্রতিটি অক্ষর আলাদা করে একটি অ্যারেতে ভেঙেছে।  
// 2. **`reverse()`**: অ্যারের উপাদানগুলো উল্টেছে।  
// 3. **`join("")`**: অ্যারেকে আবার স্ট্রিংয়ে রূপান্তর করেছে।  

// ---

// ### **বাস্তব জীবনে ব্যবহার:**
// 1. **ডেটা উল্টানো:** কোনো তালিকা বা সিরিজের উপাদান উল্টাতে।  
// 2. **স্ট্রিং উল্টানো:** কোনো শব্দ বা বাক্যকে উল্টে দেখানোর জন্য।  
// 3. **ডেটা প্রসেসিং:** বিভিন্ন অ্যালগরিদমে যেখানে উল্টানো ক্রম দরকার হয়।  

// ---

// **মনে রাখার বিষয়:**  
// - `reverse()` মূল অ্যারেকে পরিবর্তন (mutate) করে।  
// - এটি শুধুমাত্র অ্যারের জন্য সরাসরি কাজ করে। স্ট্রিং-এর ক্ষেত্রে ভিন্ন পদ্ধতি প্রয়োজন। 